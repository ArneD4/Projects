{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arned\\\\Documents\\\\ArneDefoorPortfolio\\\\login\\\\src\\\\components\\\\SnakeGame.js\";\nimport React, { Component } from 'react';\nimport Food from './Food';\nimport Snake from './Snake';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: 200,\n  direction: 'RIGHT',\n  snakeDots: [[0, 0], [2, 0]]\n};\n\nclass SnakeGame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n\n    this.onKeyDown = e => {\n      e = e || window.event;\n\n      switch (e.keyCode) {\n        case 38:\n          this.setState({\n            direction: 'UP'\n          });\n          break;\n\n        case 40:\n          this.setState({\n            direction: 'DOWN'\n          });\n          break;\n\n        case 37:\n          this.setState({\n            direction: 'LEFT'\n          });\n          break;\n\n        case 39:\n          this.setState({\n            direction: 'RIGHT'\n          });\n          break;\n      }\n    };\n  }\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] == dot[0] && head[1] == dot[1]) {\n        this.onGameOver();\n      }\n    });\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n\n    if (head[0] == food[0] && head[1] == food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      });\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake\n    });\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 10\n      });\n    }\n  }\n\n  onGameOver() {\n    alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\n    this.setState(initialState);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"snakegame\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"snake game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-area\",\n        children: [/*#__PURE__*/_jsxDEV(Snake, {\n          snakeDots: this.state.snakeDots\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Food, {\n          dot: this.state.food\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SnakeGame;","map":{"version":3,"sources":["C:/Users/arned/Documents/ArneDefoorPortfolio/login/src/components/SnakeGame.js"],"names":["React","Component","Food","Snake","getRandomCoordinates","min","max","x","Math","floor","random","y","initialState","food","speed","direction","snakeDots","SnakeGame","state","onKeyDown","e","window","event","keyCode","setState","componentDidMount","setInterval","moveSnake","document","onkeydown","componentDidUpdate","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","head","length","onGameOver","snake","pop","forEach","dot","enlargeSnake","increaseSpeed","newSnake","unshift","alert","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Food from './Food'\r\nimport Snake from './Snake'\r\n\r\nconst getRandomCoordinates = () => {\r\n    let min = 1;\r\n    let max = 98;\r\n    let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n    let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n    return [x, y]\r\n}\r\n\r\nconst initialState = {\r\n        food: getRandomCoordinates(),\r\n        speed: 200,\r\n        direction: 'RIGHT',\r\n        snakeDots: [\r\n            [0, 0],\r\n            [2, 0]\r\n        ]\r\n}\r\n\r\nclass SnakeGame extends Component {\r\n    state = initialState;\r\n    \r\n\r\n    componentDidMount() {\r\n        setInterval(this.moveSnake, this.state.speed)\r\n        document.onkeydown = this.onKeyDown;\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.checkIfOutOfBorders();\r\n        this.checkIfCollapsed();\r\n        this.checkIfEat();\r\n    }\r\n\r\n    onKeyDown = (e) => {\r\n        e = e || window.event;\r\n        switch (e.keyCode) {\r\n            case 38:\r\n                this.setState({ direction: 'UP' });\r\n                break;\r\n            case 40:\r\n                this.setState({ direction: 'DOWN' });\r\n                break;\r\n            case 37:\r\n                this.setState({ direction: 'LEFT' });\r\n                break;\r\n            case 39:\r\n                this.setState({ direction: 'RIGHT' });\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    checkIfOutOfBorders() {\r\n        let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n        if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0){\r\n            this.onGameOver();\r\n        }\r\n    }\r\n\r\n    checkIfCollapsed(){\r\n        let snake = [...this.state.snakeDots];\r\n        let head = snake[snake.length -1];\r\n        snake.pop();\r\n        snake.forEach(dot => {\r\n            if (head[0] == dot[0] && head[1] == dot[1]){\r\n                this.onGameOver();\r\n            }\r\n        })\r\n    }\r\n\r\n    checkIfEat() {\r\n        let head = this.state.snakeDots[this.state.snakeDots.length -1];\r\n        let food = this.state.food;\r\n        if (head[0] == food[0] && head[1] == food[1]){\r\n            this.setState({\r\n                food: getRandomCoordinates()\r\n            })\r\n           this.enlargeSnake();\r\n           this.increaseSpeed();\r\n        }\r\n    }\r\n\r\n    enlargeSnake() {\r\n        let newSnake = [...this.state.snakeDots];\r\n        newSnake.unshift([])\r\n        this.setState({\r\n            snakeDots: newSnake\r\n        })\r\n    }\r\n\r\n    increaseSpeed() {\r\n        if (this.state.speed > 10) {\r\n            this.setState({\r\n                speed: this.state.speed - 10\r\n            })\r\n        }\r\n    }\r\n\r\n    onGameOver(){\r\n        alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\r\n        this.setState(initialState)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"snakegame\">\r\n                <h1>snake game</h1>\r\n                <div className=\"game-area\">\r\n                    <Snake snakeDots={this.state.snakeDots} />\r\n                    <Food dot={this.state.food} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SnakeGame\r\n"]},"metadata":{},"sourceType":"module"}