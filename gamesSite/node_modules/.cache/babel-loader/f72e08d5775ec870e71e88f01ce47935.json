{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arned\\\\Documents\\\\ArneDefoorPortfolio\\\\login\\\\src\\\\components\\\\SnakeGame.js\";\nimport React, { Component } from 'react';\nimport Food from './Food';\nimport Snake from './Snake';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: this.state.speed,\n  direction: 'RIGHT',\n  snakeDots: [[0, 0], [2, 0]]\n};\n\nclass SnakeGame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n\n    this.onKeyDown = e => {\n      e = e || window.event;\n\n      switch (e.keyCode) {\n        case 38:\n          if (![\"UP\", \"DOWN\"].includes(this.state.direction)) {\n            this.setState({\n              direction: \"UP\"\n            });\n          }\n\n          break;\n\n        case 40:\n          if (![\"UP\", \"DOWN\"].includes(this.state.direction)) {\n            this.setState({\n              direction: \"DOWN\"\n            });\n          }\n\n          break;\n\n        case 37:\n          if (![\"LEFT\", \"RIGHT\"].includes(this.state.direction)) {\n            this.setState({\n              direction: \"LEFT\"\n            });\n          }\n\n          break;\n\n        case 39:\n          if (![\"LEFT\", \"RIGHT\"].includes(this.state.direction)) {\n            this.setState({\n              direction: \"RIGHT\"\n            });\n          }\n\n          break;\n      }\n    };\n\n    this.moveSnake = () => {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n\n      switch (this.state.direction) {\n        case 'RIGHT':\n          head = [head[0] + 2, head[1]];\n          break;\n\n        case 'LEFT':\n          head = [head[0] - 2, head[1]];\n          break;\n\n        case 'DOWN':\n          head = [head[0], head[1] + 2];\n          break;\n\n        case 'UP':\n          head = [head[0], head[1] - 2];\n          break;\n      }\n\n      dots.push(head);\n      dots.shift();\n      this.setState({\n        snakeDots: dots\n      });\n    };\n  }\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    console.log(this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] == dot[0] && head[1] == dot[1]) {\n        this.onGameOver();\n      }\n    });\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n\n    if (head[0] == food[0] && head[1] == food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      });\n      this.enlargeSnake();\n      this.increaseSpeed();\n      console.log(this.state.speed);\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake\n    });\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 10\n      });\n    }\n  }\n\n  onGameOver() {\n    alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\n    this.setState(initialState);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"snakegame\",\n      children: [console.log(this.state.speed), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"snake game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-area\",\n        children: [/*#__PURE__*/_jsxDEV(Snake, {\n          snakeDots: this.state.snakeDots\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Food, {\n          dot: this.state.food\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SnakeGame;","map":{"version":3,"sources":["C:/Users/arned/Documents/ArneDefoorPortfolio/login/src/components/SnakeGame.js"],"names":["React","Component","Food","Snake","getRandomCoordinates","min","max","x","Math","floor","random","y","initialState","food","speed","state","direction","snakeDots","SnakeGame","onKeyDown","e","window","event","keyCode","includes","setState","moveSnake","dots","head","length","push","shift","componentDidMount","setInterval","console","log","document","onkeydown","componentDidUpdate","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","snake","pop","forEach","dot","enlargeSnake","increaseSpeed","newSnake","unshift","alert","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Food from './Food'\r\nimport Snake from './Snake'\r\n\r\nconst getRandomCoordinates = () => {\r\n    let min = 1;\r\n    let max = 98;\r\n    let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n    let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n    return [x, y]\r\n}\r\n\r\nconst initialState = {\r\n        food: getRandomCoordinates(),\r\n        speed: this.state.speed,\r\n        direction: 'RIGHT',\r\n        snakeDots: [\r\n            [0, 0],\r\n            [2, 0]\r\n        ]\r\n}\r\n\r\n\r\n\r\n\r\nclass SnakeGame extends Component {\r\n    state = initialState;\r\n \r\n    componentDidMount() {  \r\n        setInterval(this.moveSnake, this.state.speed)\r\n        console.log(this.state.speed)\r\n        document.onkeydown = this.onKeyDown;     \r\n    }\r\n\r\n\r\n    componentDidUpdate(){\r\n        this.checkIfOutOfBorders();\r\n        this.checkIfCollapsed();\r\n        this.checkIfEat();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    onKeyDown = (e) => {\r\n        e = e || window.event;\r\n        switch (e.keyCode) {\r\n          case 38:\r\n            if (![\"UP\", \"DOWN\"].includes(this.state.direction)) {\r\n              this.setState({ direction: \"UP\" });\r\n            }\r\n            break;\r\n          case 40:\r\n            if (![\"UP\", \"DOWN\"].includes(this.state.direction)) {\r\n              this.setState({ direction: \"DOWN\" });\r\n            }\r\n            break;\r\n          case 37:\r\n            if (![\"LEFT\", \"RIGHT\"].includes(this.state.direction)) {\r\n              this.setState({ direction: \"LEFT\" });\r\n            }\r\n            break;\r\n          case 39:\r\n            if (![\"LEFT\", \"RIGHT\"].includes(this.state.direction)) {\r\n              this.setState({ direction: \"RIGHT\" });\r\n            }\r\n            break;\r\n        }\r\n      };\r\n\r\n\r\n  \r\n    moveSnake = () => {\r\n        let dots = [...this.state.snakeDots];\r\n        let head = dots[dots.length - 1]\r\n        switch (this.state.direction) {\r\n            case 'RIGHT':\r\n                head = [head[0] + 2, head[1]];\r\n                break;\r\n            case 'LEFT':\r\n                head = [head[0] - 2, head[1]];\r\n                break;\r\n            case 'DOWN':\r\n                head = [head[0], head[1] + 2];\r\n                break;\r\n            case 'UP':\r\n                head = [head[0], head[1] - 2];\r\n                break;\r\n        }\r\n        dots.push(head);\r\n        dots.shift();\r\n        this.setState({\r\n            snakeDots: dots\r\n        })\r\n    }\r\n\r\n\r\n    checkIfOutOfBorders() {\r\n        let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n        if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0){\r\n            this.onGameOver();\r\n        }\r\n    }\r\n\r\n    checkIfCollapsed(){\r\n        let snake = [...this.state.snakeDots];\r\n        let head = snake[snake.length -1];\r\n        snake.pop();\r\n        snake.forEach(dot => {\r\n            if (head[0] == dot[0] && head[1] == dot[1]){\r\n                this.onGameOver();\r\n            }\r\n        })\r\n    }\r\n\r\n    checkIfEat() {\r\n        let head = this.state.snakeDots[this.state.snakeDots.length -1];\r\n        let food = this.state.food;\r\n        if (head[0] == food[0] && head[1] == food[1]){\r\n            this.setState({\r\n                food: getRandomCoordinates()\r\n            })\r\n           this.enlargeSnake();\r\n           this.increaseSpeed();\r\n           console.log(this.state.speed)\r\n        }\r\n    }\r\n\r\n    enlargeSnake() {\r\n        let newSnake = [...this.state.snakeDots];    \r\n        newSnake.unshift([])\r\n        this.setState({\r\n            snakeDots: newSnake,\r\n\r\n        })\r\n    }\r\n\r\n    increaseSpeed() {\r\n        if(this.state.speed > 10) {\r\n            this.setState({\r\n                speed: this.state.speed -10\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    onGameOver(){\r\n        alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\r\n        this.setState(initialState)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"snakegame\">\r\n                {           console.log(this.state.speed)}\r\n                <h1>snake game</h1>\r\n                <button></button>\r\n                <div className=\"game-area\">\r\n                    <Snake snakeDots={this.state.snakeDots} />\r\n                    <Food dot={this.state.food} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SnakeGame\r\n"]},"metadata":{},"sourceType":"module"}