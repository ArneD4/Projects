{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arned\\\\Documents\\\\ArneDefoorPortfolio\\\\login\\\\src\\\\components\\\\SnakeGame.js\";\nimport React, { Component } from 'react';\nimport Food from './Food';\nimport Snake from './Snake';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: 200,\n  direction: 'RIGHT',\n  snakeDots: [[0, 0], [2, 0]]\n};\nsetTimeout(function () {\n  document.getElementById(\"block\").style.animation = \" block 1s infinite\";\n  const checkDead = setInterval(function () {\n    var characterTop = parseInt(window.getComputedStyle(character).getPropertyValue(\"top\"));\n    var blockLeft = parseInt(window.getComputedStyle(block).getPropertyValue(\"left\"));\n\n    if (blockLeft < 20 && blockLeft > 0 && characterTop >= 130) {\n      setModalIsOpen(true);\n      block.style.animation = \"none\";\n      audio3.play();\n      clearInterval(checkDead);\n    } else if (character === null || block === null) {\n      return;\n    } else {\n      userScore++;\n      setScore(userScore);\n    }\n  }, 10);\n}, 4000);\n\nclass SnakeGame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n\n    this.onKeyDown = e => {\n      e = e || window.event;\n\n      switch (e.keyCode) {\n        case 38:\n          if (![\"UP\", \"DOWN\"].includes(this.state.direction)) {\n            this.setState({\n              direction: \"UP\"\n            });\n          }\n\n          break;\n\n        case 40:\n          if (![\"UP\", \"DOWN\"].includes(this.state.direction)) {\n            this.setState({\n              direction: \"DOWN\"\n            });\n          }\n\n          break;\n\n        case 37:\n          if (![\"LEFT\", \"RIGHT\"].includes(this.state.direction)) {\n            this.setState({\n              direction: \"LEFT\"\n            });\n          }\n\n          break;\n\n        case 39:\n          if (![\"LEFT\", \"RIGHT\"].includes(this.state.direction)) {\n            this.setState({\n              direction: \"RIGHT\"\n            });\n          }\n\n          break;\n      }\n    };\n\n    this.moveSnake = () => {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n\n      switch (this.state.direction) {\n        case 'RIGHT':\n          head = [head[0] + 2, head[1]];\n          break;\n\n        case 'LEFT':\n          head = [head[0] - 2, head[1]];\n          break;\n\n        case 'DOWN':\n          head = [head[0], head[1] + 2];\n          break;\n\n        case 'UP':\n          head = [head[0], head[1] - 2];\n          break;\n      }\n\n      dots.push(head);\n      dots.shift();\n      this.setState({\n        snakeDots: dots\n      });\n    };\n  }\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] == dot[0] && head[1] == dot[1]) {\n        this.onGameOver();\n      }\n    });\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n\n    if (head[0] == food[0] && head[1] == food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      });\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake\n    });\n  }\n\n  increaseSpeed() {\n    let newSpeed = [this.state.speed];\n    newSpeed = newSpeed + 100;\n    this.setState({\n      speed: newSpeed\n    });\n  }\n\n  onGameOver() {\n    alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\n    this.setState(initialState);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"snakegame\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"snake game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-area\",\n        children: [/*#__PURE__*/_jsxDEV(Snake, {\n          snakeDots: this.state.snakeDots\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Food, {\n          dot: this.state.food\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SnakeGame;","map":{"version":3,"sources":["C:/Users/arned/Documents/ArneDefoorPortfolio/login/src/components/SnakeGame.js"],"names":["React","Component","Food","Snake","getRandomCoordinates","min","max","x","Math","floor","random","y","initialState","food","speed","direction","snakeDots","setTimeout","document","getElementById","style","animation","checkDead","setInterval","characterTop","parseInt","window","getComputedStyle","character","getPropertyValue","blockLeft","block","setModalIsOpen","audio3","play","clearInterval","userScore","setScore","SnakeGame","state","onKeyDown","e","event","keyCode","includes","setState","moveSnake","dots","head","length","push","shift","componentDidMount","onkeydown","componentDidUpdate","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","snake","pop","forEach","dot","enlargeSnake","increaseSpeed","newSnake","unshift","newSpeed","alert","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Food from './Food'\r\nimport Snake from './Snake'\r\n\r\nconst getRandomCoordinates = () => {\r\n    let min = 1;\r\n    let max = 98;\r\n    let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n    let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n    return [x, y]\r\n}\r\n\r\nconst initialState = {\r\n        food: getRandomCoordinates(),\r\n        speed: 200,\r\n        direction: 'RIGHT',\r\n        snakeDots: [\r\n            [0, 0],\r\n            [2, 0]\r\n        ]\r\n}\r\n\r\nsetTimeout(function () {\r\n    (document.getElementById(\"block\")).style.animation = \" block 1s infinite\";\r\n    const checkDead = setInterval(function () {\r\n        var characterTop = parseInt(window.getComputedStyle(character).getPropertyValue(\"top\"));\r\n        var blockLeft = parseInt(window.getComputedStyle(block).getPropertyValue(\"left\"));\r\n        if (blockLeft < 20 && blockLeft > 0 && characterTop >= 130) {\r\n            setModalIsOpen(true);\r\n            block.style.animation = \"none\";\r\n            audio3.play();\r\n            clearInterval(checkDead)\r\n        }else if(character === null || block === null){\r\n            return\r\n        }\r\n        else{\r\n            userScore++\r\n            setScore(userScore)\r\n        }\r\n\r\n    }, 10)\r\n}, 4000)\r\n\r\nclass SnakeGame extends Component {\r\n    state = initialState;\r\n    \r\n\r\n    componentDidMount() {\r\n        setInterval(this.moveSnake, this.state.speed)\r\n        document.onkeydown = this.onKeyDown;\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.checkIfOutOfBorders();\r\n        this.checkIfCollapsed();\r\n        this.checkIfEat();\r\n    }\r\n\r\n    onKeyDown = (e) => {\r\n        e = e || window.event;\r\n        switch (e.keyCode) {\r\n          case 38:\r\n            if (![\"UP\", \"DOWN\"].includes(this.state.direction)) {\r\n              this.setState({ direction: \"UP\" });\r\n            }\r\n            break;\r\n          case 40:\r\n            if (![\"UP\", \"DOWN\"].includes(this.state.direction)) {\r\n              this.setState({ direction: \"DOWN\" });\r\n            }\r\n            break;\r\n          case 37:\r\n            if (![\"LEFT\", \"RIGHT\"].includes(this.state.direction)) {\r\n              this.setState({ direction: \"LEFT\" });\r\n            }\r\n            break;\r\n          case 39:\r\n            if (![\"LEFT\", \"RIGHT\"].includes(this.state.direction)) {\r\n              this.setState({ direction: \"RIGHT\" });\r\n            }\r\n            break;\r\n        }\r\n      };\r\n\r\n\r\n      \r\n    moveSnake = () => {\r\n        let dots = [...this.state.snakeDots];\r\n        let head = dots[dots.length - 1]\r\n        switch (this.state.direction) {\r\n            case 'RIGHT':\r\n                head = [head[0] + 2, head[1]];\r\n                break;\r\n            case 'LEFT':\r\n                head = [head[0] - 2, head[1]];\r\n                break;\r\n            case 'DOWN':\r\n                head = [head[0], head[1] + 2];\r\n                break;\r\n            case 'UP':\r\n                head = [head[0], head[1] - 2];\r\n                break;\r\n        }\r\n        dots.push(head);\r\n        dots.shift();\r\n        this.setState({\r\n            snakeDots: dots\r\n        })\r\n    }\r\n\r\n\r\n    checkIfOutOfBorders() {\r\n        let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n        if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0){\r\n            this.onGameOver();\r\n        }\r\n    }\r\n\r\n    checkIfCollapsed(){\r\n        let snake = [...this.state.snakeDots];\r\n        let head = snake[snake.length -1];\r\n        snake.pop();\r\n        snake.forEach(dot => {\r\n            if (head[0] == dot[0] && head[1] == dot[1]){\r\n                this.onGameOver();\r\n            }\r\n        })\r\n    }\r\n\r\n    checkIfEat() {\r\n        let head = this.state.snakeDots[this.state.snakeDots.length -1];\r\n        let food = this.state.food;\r\n        if (head[0] == food[0] && head[1] == food[1]){\r\n            this.setState({\r\n                food: getRandomCoordinates()\r\n            })\r\n           this.enlargeSnake();\r\n           this.increaseSpeed();\r\n        }\r\n    }\r\n\r\n    enlargeSnake() {\r\n        let newSnake = [...this.state.snakeDots];\r\n        newSnake.unshift([])\r\n        this.setState({\r\n            snakeDots: newSnake\r\n        })\r\n    }\r\n\r\n    increaseSpeed() {\r\n        let newSpeed = [this.state.speed]\r\n        newSpeed = newSpeed + 100\r\n        this.setState({\r\n            speed: newSpeed\r\n        })\r\n    }\r\n\r\n    onGameOver(){\r\n        alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\r\n        this.setState(initialState)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"snakegame\">\r\n                <h1>snake game</h1>\r\n                <div className=\"game-area\">\r\n                    <Snake snakeDots={this.state.snakeDots} />\r\n                    <Food dot={this.state.food} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SnakeGame\r\n"]},"metadata":{},"sourceType":"module"}